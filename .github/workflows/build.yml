name: Build Application
run-name: ${{ github.actor }} is running build
on: 
  workflow_dispatch:
  release:
    types:
      - published

jobs:
  run-build:
    runs-on: ubuntu-22.04
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Install PyInstaller
      - name: Install PyInstaller
        run: pip install pyinstaller

      # Step 5: Create the executable with PyInstaller
      - name: Build with PyInstaller
        run: |
          pyinstaller --onefile --name ssj main.py

            # Step 6: Upload the build artifact (optional)
      - name: Upload Executable as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sjj
          path: dist/ssj

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: dist/ssj
          asset_name: ssj
      
